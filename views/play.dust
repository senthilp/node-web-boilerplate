<!doctype html>
<html>
<head>
	<title>playground</title>
	<style>
		body {
    		padding: 20px;
		}
		.clr {
			display: block;
			clear: both;
		}
		.clr:after {
			display: block;
			visibility: hidden;
			clear: both;
			overflow: hidden;
			height: 0;
			content: "\0020";
		}
		.slider-container {
			margin: 200px auto 100px;
			width: 500px;			
		}		

		/* slider root element */
		.smartslider {
		    background-color: #E63C65;
		    height: 9px;
		    position: relative;
		    border: 1px solid #333;
		    width: 100%;
		    float: left;
		    clear: right;
		    margin-top: 10px;
		    border-radius:5px;
		    box-shadow:inset 0 0 8px #000;
		}

		/* drag handle */
		.smartslider a {
		    background-color: #fff;
		    height: 28px;
		    width: 28px;
		    top: -12px;
		    position: absolute;
		    display: block;
		    margin-top: 1px;
		    border: 1px solid #000;
		    cursor: pointer;
		    box-shadow: 0 0 6px #000;
		    border-radius: 50%;		    
		}	
	</style>
</head>
<body>
	<div class="slider-container clr">
		<div class="smartslider" data-min="0" data-max="20" data-value="0" data-step="0" data-init="true">
			<a href="#"></a>
		</div>
	</div>
	<br/>
	<div id="react"></div>
	<script src="http://code.jquery.com/jquery-1.11.1.js"></script>
	<script src="/js/rangeslider/jquery.smartslider.js"></script>
	<script src="/js/react/react.js"></script>
	<script src="/js/react/react-with-addons.js"></script>
	<script src="/js/react/JSXTransformer.js"></script>

	<script>
	</script>
	<script>
		/* global React */
		var ProductCategoryRow = React.createClass({displayName: 'ProductCategoryRow',
		    render: function() {
		        return (React.DOM.tr(null, React.DOM.th( {colSpan:"2"}, this.props.category)));
		    }
		});

		var ProductRow = React.createClass({displayName: 'ProductRow',
		    render: function() {
		        var name = this.props.product.stocked ?
		            this.props.product.name :
		            React.DOM.span( {style:{color: 'red'}},
		                this.props.product.name
		            );
		        return (
		            React.DOM.tr(null,
		                React.DOM.td(null, name),
		                React.DOM.td(null, this.props.product.price)
		            )
		        );
		    }
		});

		var ProductTable = React.createClass({displayName: 'ProductTable',
		    render: function() {
		        console.log(this.props);
		        var rows = [];
		        var lastCategory = null;
		        this.props.products.forEach(function(product) {
		            if (product.name.indexOf(this.props.filterText) === -1 || (!product.stocked && this.props.inStockOnly)) {
		                return;
		            }
		            if (product.category !== lastCategory) {
		                rows.push(ProductCategoryRow( {category:product.category, key:product.category} ));
		            }
		            rows.push(ProductRow( {product:product, key:product.name} ));
		            lastCategory = product.category;
		        }.bind(this));
		        return (
		            React.DOM.table(null,
		                React.DOM.thead(null,
		                    React.DOM.tr(null,
		                        React.DOM.th(null, "Name"),
		                        React.DOM.th(null, "Price")
		                    )
		                ),
		                React.DOM.tbody(null, rows)
		            )
		        );
		    }
		});

		var SearchBar = React.createClass({displayName: 'SearchBar',
		    handleChange: function() {
		        this.props.onUserInput(
		            this.refs.filterTextInput.getDOMNode().value,
		            this.refs.inStockOnlyInput.getDOMNode().checked
		        );
		    },
		    render: function() {
		        return (
		            React.DOM.form( {onSubmit:this.handleSubmit},
		                React.DOM.input(
		                    {type:"text",
		                    placeholder:"Search...",
		                    value:this.props.filterText,
		                    ref:"filterTextInput",
		                    onChange:this.handleChange}
		                ),
		                React.DOM.p(null,
		                    React.DOM.input(
		                        {type:"checkbox",
		                        value:this.props.inStockOnly,
		                        ref:"inStockOnlyInput",
		                        onChange:this.handleChange}
		                    ),
		                    "Only show products in stock"
		                )
		            )
		        );
		    }
		});

		var FilterableProductTable = React.createClass({displayName: 'FilterableProductTable',
		    getInitialState: function() {
		        return {
		            filterText: '',
		            inStockOnly: false
		        };
		    },
		    
		    handleUserInput: function(filterText, inStockOnly) {
		        this.setState({
		            filterText: filterText,
		            inStockOnly: inStockOnly
		        });
		    },
		    
		    render: function() {
		        return (
		            React.DOM.div(null,
		                SearchBar(
		                    {filterText:this.state.filterText,
		                    inStockOnly:this.state.inStockOnly,
		                    onUserInput:this.handleUserInput}
		                ),
		                ProductTable(
		                    {products:this.props.products,
		                    filterText:this.state.filterText,
		                    inStockOnly:this.state.inStockOnly}
		                )
		            )
		        );
		    }
		});


		var PRODUCTS = [
			{category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},
			{category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},
			{category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},
			{category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},
			{category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},
			{category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}
		];
		 
		React.renderComponent(FilterableProductTable( {products:PRODUCTS} ), document.getElementById('react'));
	</script>
</body>
</html>